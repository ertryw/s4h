@{
    ViewData["Title"] = "S4H";
    Layout = "_DevExtremeLayout";
}

<div class="drawer">
    @(Html.DevExtreme().Drawer()
        .ID("drawer")
        .OpenedStateMode(DrawerOpenedStateMode.Shrink)
        .Opened(true)
        .Position(DrawerPosition.Left)
        .Height("100vh")
        .RevealMode(DrawerRevealMode.Slide)
        .Content(
        @<text>  
            <div class="content px-4" style="height:100%">
                @(
                    Html.DevExtreme().DataGrid<s4h.Models.RomRoom>()
                                .ID("gridContainer")
                                .ShowBorders(true)
                                .DataSource(d => d.Mvc().DeleteAction("DeleteRoom").LoadAction("GetRooms").Key("Id"))
                                .DataSourceOptions(o => o.Paginate(true).PageSize(20))
                                .RemoteOperations(true)
                                .OnEditingStart("editingStart")
                                .OnInitialized("gridInit")
                                .OnContentReady("contentReady")
                                .ShowRowLines(true)
                                .Editing(e => e.Mode(GridEditMode.Popup)
                                    .AllowUpdating(true)
                                    .AllowAdding(true)
                                    .AllowDeleting(true)
                                    .Texts(t => t.ConfirmDeleteMessage("Czy napewno chcesz usnąć ten rekord?"))
                                    .Popup(p => p
                                        .Title("Informacje")
                                        .ID("editPopup")
                                        .ShowTitle(true)
                                        .Width(800)
                                        .Height(400)
                                        .ToolbarItems(items =>
                                        {
                                                items.Add()
                                                    .Toolbar(Toolbar.Bottom)
                                                    .Widget(w => w
                                                    .Button()
                                                    .Text("Zapisz")
                                                    .ValidationGroup("roomValidation")
                                                    .UseSubmitBehavior(true)
                                                    .OnClick("OnSave"))
                                                    .Location(ToolbarItemLocation.After);

                                                items.Add()
                                                    .Toolbar(Toolbar.Bottom)
                                                    .Widget(w => w
                                                    .Button()
                                                    .Text("Anuluj")
                                                    .OnClick("OnClosing"))
                                                    .Location(ToolbarItemLocation.After);
                                        })
                                        .OnShowing("formPopup")
                                        .ContentTemplate("<div> Wczytywanie ... </div>")
                                        .OnHiding("OnClosing")
                            )
                        )
                        .Columns(columns =>
                        {
                            columns.AddFor(m => m.Id).Width(50);
                            columns.AddFor(m => m.Loc.Name).Caption("Lokalizacja").Width(100);
                            columns.AddFor(m => m.Ros.Name).Caption("Standard");
                            columns.AddFor(m => m.Name).Caption("Nazwa");
                            columns.AddFor(m => m.Description).Caption("Opis");
                        })
                    )
            </div>
        </text>)

        .Template(@<text>
        <div style="width: 200px;">
            @(Html.DevExtreme().TreeView()
            .ID("list")
            .DataSource(d => d.Mvc().LoadAction("GetItems"))
            .KeyExpr("ID")
            .DisplayExpr("Text")
            )
        </div>
    </text>)
        )
</div>



<script>

    var editedId = 0;
    var locations = null;
    var edited = null;
    var formInstance = null;
    var gridInstance = null;

    $.getJSON("@Url.Action("getlocals", "locals")", {}, function (result) {
        locations = result;
    });

    function getLocalStandards(localId) {

        $.getJSON("@Url.Action("getstandards", "locals")", { localId: localId }, function (result) {

            console.log("disabled false");
            formInstance.itemOption("standard", {
                editorOptions: {
                    dataSource: result,
                    disabled: false
                }
            });
        });

    }

    function clickMenu() {
        $("#drawer").dxDrawer("toggle");
    }

    function contentReady ()
    {
        let buttonAdd = $(".dx-datagrid-addrow-button").dxButton({
            icon: "",
            text: "Dodaj pokój",
        })
    }

    function gridInit(e) {
        gridInstance = e.component;
    }

    function OnClosing(e) {    
        $("#editPopup").dxPopup("hide");
        $(".dx-popup-content").empty();

        editedId = 0;
    }

    function OnSave() {
        let validation = formInstance.validate();

        if (validation.isValid) 
        {
            if (editedId == 0) {
                $.ajax({
                    url: '@Url.Action("insertroom", "home")',
                    type: 'POST',
                    data: edited,
                    success: function (result) {
                        OnClosing();
                        gridInstance.refresh();
                    },
                    error: function (request, status, error) {
                        alert("Wystąpił błąd podczas dodawania pokoju");
                    }
                });
            }
            else
            {
                $.ajax({
                    url: "@Url.Action("setroom", "home")",
                    type: 'PUT',
                    data: edited,
                    success: function (result) {
                        OnClosing();
                        gridInstance.refresh();
                    },
                    error: function (request, status, error) {
                        alert("Wystąpił błąd podczas edycji pokoju");
                    }
                });
            }
        }
    }

    function editingStart(e) {
        editedId = e.data.Id;
        console.log("editing start");
    }   
    

    function formPopup(component) {
        console.log("popup")

        $.getJSON("@Url.Action("getroom", "home")", { id: editedId }, function (room) {

            edited = room;

            if (editedId == 0) 
            {
                edited["Color"] = "#808080";
                edited["FloorNumber"] = 1;
            }

            if (editedId > 0)
                getLocalStandards(edited.Locid);

            $(".dx-popup-content").dxForm({
                formData: room,
                colCount: 3,
                showValidationSummary: true,
                validationGroup: 'roomValidation',

                onInitialized: function (e) {       
                    formInstance = e.component;
                },

                onFieldDataChanged: function (e) {
                    edited[e.dataField] = e.value;
             
                    if (e.dataField == "Locid" && e.value > 0) { 
                        getLocalStandards(e.value);
                    }
                },

                items: [
                    {
                        colSpan: 3,
                        visible: false,
                        dataField: "Id", editorType: "dxTextBox", editorOptions: {
                            disabled: true,
                        }
                    },
                    {
                        validationRules: [
                            { 
                                type: "required" 
                            },
                            {
                                type: "range",
                                min: "1",
                                message: "Lokalizacja wymagana",
                            }
                        ],
                        label: { text: "Lokalizacja" }, dataField: "Locid", editorType: "dxSelectBox",
                        editorOptions: {
                            dataSource: locations,
                            valueExpr: "Id",
                            displayExpr: "Name",
                        }
                    },
                    {
                        colSpan: 2,
                        caption: "standard",
                        name: "standard",
                        validationRules: [
                            { type: "required" },
                            {
                                type: "range",
                                min: "1",
                                message: "Standard wymagany",
                            }
                        ],
                        label: { text: "Standard" }, dataField: "Rosid", editorType: "dxSelectBox",
                        editorOptions: {
                            dataSource: {},
                            valueExpr: "Id",
                            displayExpr: "Name",
                            disabled: true
                        }
                    },
                   
                    {
                        validationRules: [{
                            type: "required",
                            message: "Nazwa wymagana",
                        }],
                        label: { text: "Nazwa" }, dataField: "Name", editorType: "dxTextBox", editorOptions: {}
                    },
                    {
                        label: { text: "Nazwa Skrucona" }, dataField: "Shortcut", editorType: "dxTextBox", editorOptions: {}
                    },
                    {
                        validationRules: [{
                            type: "required",
                            message: "Piętro wymagane",
                        }],
                        label: { text: "Piętro" }, dataField: "FloorNumber", editorType: "dxNumberBox", editorOptions: { value: 1 }
                    },
                    {
                        label: { text: "Numer telefonu" }, dataField: "Phone", editorType: "dxTextBox", editorOptions: {}
                    },
                    {
                        label: { text: "Zamek" }, dataField: "LockNumber", editorType: "dxTextBox", editorOptions: {}
                    },
                    {
                        itemType: "empty"
                    },
                    {
                        label: { text: "Łazięka" }, dataField: "HaveBathroom", editorType: "dxCheckBox", editorOptions: {}
                    },

                    {
                        label: { text: "Dla niepełnosprawnych" }, dataField: "ForPeopleWithDisabilities", editorType: "dxCheckBox", editorOptions: {}
                    },

                    {
                        label: { text: "Zamknięty" }, dataField: "IsLocked", editorType: "dxCheckBox", editorOptions: {}
                    },
                    {
                        validationRules: [{
                            type: "required",
                            message: "Kolor wymagany",
                        }],
                        label: { text: "Kolor" }, dataField: "Color", editorType: "dxColorBox", editorOptions: {
                        }
                    },
                    {
                        colSpan: 2,
                        validationRules: [{
                            type: "required",
                            message: "Opis wymagany",
                        }],
                        label: { text: "Opis" }, dataField: "Description", editorType: "dxTextArea", editorOptions: {}
                    }
                ]
            });

        });
    }




</script>