@{
    ViewData["Title"] = "S4H";
    Layout = "_DevExtremeLayout";
}

<div class="left-content">
    @(Html.DevExtreme().TreeView()
        .ID("simple-treeview")
        .DataSource(d => d.Mvc().LoadAction("GetItems"))   
        .DataStructure(TreeViewDataStructure.Plain)
        .KeyExpr("ID")
        .DisplayExpr("Text")
        .ExpandedExpr("Expanded")
        )
</div>


<div class="right-content">
    @(
        Html.DevExtreme().DataGrid<s4h.Models.RomRoom>()
                    .ID("gridContainer")
                    .ShowBorders(true)
                    .DataSource(d => d.Mvc().LoadAction("GetRooms").InsertAction("InsertRoom").Key("Id"))
                    .DataSourceOptions(o => o.Paginate(true).PageSize(20))
                    .RemoteOperations(true)
                    .OnEditingStart("editingStart")
                    .OnSaved("OnSaved")
                    .Editing(e => e.Mode(GridEditMode.Popup)
                        .AllowUpdating(true)
                        .AllowAdding(true)
                        .AllowDeleting(true)
                        .Popup(p => p
                            .Title("Informacje")
                            .ID("editPopup")
                            .ShowTitle(true)
                            .Width(1000)
                            .Height(525)
                            .ToolbarItems(items =>
                            {
                                    items.Add()
                                        .Toolbar(Toolbar.Bottom)
                                        .Widget(w => w
                                        .Button()
                                        .Text("Zapisz")
                                        .ValidationGroup("roomValidation")
                                        .UseSubmitBehavior(true)
                                        .OnClick("OnSave"))
                                        .Location(ToolbarItemLocation.After);

                                    items.Add()
                                        .Toolbar(Toolbar.Bottom)
                                        .Widget(w => w
                                        .Button()
                                        .Text("Anuluj")
                                        .OnClick("OnClosing"))
                                        .Location(ToolbarItemLocation.After);
                            })
                            .OnShowing("formPopup")
                            .ContentTemplate("<div> Wczytywanie ... </div>")
                            .OnHiding("OnClosing")
                )
            )
            .Columns(columns =>
            {
                columns.AddFor(m => m.Id).Width(50);
                columns.AddFor(m => m.Loc.Name).Caption("Lokalizacja").Width(100);
                columns.AddFor(m => m.Ros.Name).Caption("Standard");
                columns.AddFor(m => m.Name).Caption("Nazwa");
                columns.AddFor(m => m.Description).Caption("Opis");
            })
        )
</div>


<script>

    var editedId = 0;
    var standards = null;
    var locations = null;
    var edited = null;
    var formInstance = null;

    $.getJSON("@Url.Action("getlocationsandstandards", "home")", { id: editedId }, function (result) {
        standards = result[0];
        locations = result[1];
    });


    function OnSaved() {
        $.ajax({
            url: "@Url.Action("setroom", "home")",
            type: 'PUT',
            data: edited,
            success: function (result) {
                // Do something with the result
            }
        });
    }

    function OnClosing() {
        $("#editPopup").dxPopup("hide");
        $(".dx-popup-content").empty();
        editedId = 0;
    }

    function OnSave() {
        //let validation = formInstance.validate();
        let validation = $(".dx-popup-content").dxForm("validate");

        // if (validation.isValid) {
        //     $.ajax({
        //         url: '@Url.Action("insertroom", "home")',
        //         type: 'POST',
        //         data: edited,
        //         success: function (result) {
        //             // Do something with the result
        //         }
        //     });
        // }
        //alert("The Save was clicked");
    }

    function editingStart(e) {
        editedId = e.data.Id;
        console.log("editing start");
    }

    function formPopup(component) {
        console.log("popup")

        $.getJSON("@Url.Action("getroom", "home")", { id: editedId }, function (room) {

            edited = room ?? {};

            $(".dx-popup-content").dxForm({
                formData: room,
                colCount: 3,
                showValidationSummary: true,
                validationGroup: 'roomValidation',
                onFieldDataChanged: function (e) {
                    edited[e.dataField] = e.value;
                },
                items: [
                {   
                        dataField: "Id", editorType: "dxTextBox", editorOptions: {
                        disabled: true,
                    }
                },
                {
                        colSpan: 2,
                        validationRules: [{
                            type: "required",
                            message: "Standard wymagany",
                        }],
                        label: {text:"Standard"}, dataField: "Rosid", editorType: "dxSelectBox", editorOptions: {
                        dataSource: standards,
                        valueExpr: "Id",
                        displayExpr: "Name",
                       
                    }
                },
                {
                    validationRules: [{
                        type: "required",
                        message: "Lokalizacja wymagana",
                    }],
                    label: { text: "Lokalizacja" }, dataField: "Locid", editorType: "dxSelectBox", editorOptions: {
                    dataSource: locations,
                    valueExpr: "Id",
                    displayExpr: "Name",
                    }
                },
                {
                    dataField: "Phone", editorType: "dxTextBox", editorOptions: { }
                },
                {
                    dataField: "LockNumber", editorType: "dxTextBox", editorOptions: {}
                },
                {
                    dataField: "FloorNumber", editorType: "dxNumberBox", editorOptions: {}
                },
                {
                     dataField: "HaveBathroom", editorType: "dxCheckBox", editorOptions: {}
                },
                {
                     dataField: "ForPeopleWithDisabilities", editorType: "dxCheckBox", editorOptions: {}
                },
                {
                    dataField: "Color", editorType: "dxTextBox", editorOptions: {}
                },
                {
                    dataField: "Name", editorType: "dxTextBox", editorOptions: {}
                },
                {
                     dataField: "Shortcut", editorType: "dxTextBox", editorOptions: {}
                },
                {
                     dataField: "Description", editorType: "dxTextBox", editorOptions: {}
                }
                ]
            });

        });
    }




</script>